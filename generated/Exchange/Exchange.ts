// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CloseMarketOrderPlaced extends ethereum.Event {
  get params(): CloseMarketOrderPlaced__Params {
    return new CloseMarketOrderPlaced__Params(this);
  }
}

export class CloseMarketOrderPlaced__Params {
  _event: CloseMarketOrderPlaced;

  constructor(event: CloseMarketOrderPlaced) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OpenMarketOrderPlaced extends ethereum.Event {
  get params(): OpenMarketOrderPlaced__Params {
    return new OpenMarketOrderPlaced__Params(this);
  }
}

export class OpenMarketOrderPlaced__Params {
  _event: OpenMarketOrderPlaced;

  constructor(event: OpenMarketOrderPlaced) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OrderCancelled extends ethereum.Event {
  get params(): OrderCancelled__Params {
    return new OrderCancelled__Params(this);
  }
}

export class OrderCancelled__Params {
  _event: OrderCancelled;

  constructor(event: OrderCancelled) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get orderId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OrderExecuted extends ethereum.Event {
  get params(): OrderExecuted__Params {
    return new OrderExecuted__Params(this);
  }
}

export class OrderExecuted__Params {
  _event: OrderExecuted;

  constructor(event: OrderExecuted) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get orderId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get executor(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class OrderPlaced extends ethereum.Event {
  get params(): OrderPlaced__Params {
    return new OrderPlaced__Params(this);
  }
}

export class OrderPlaced__Params {
  _event: OrderPlaced;

  constructor(event: OrderPlaced) {
    this._event = event;
  }

  get marketId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get orderType(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get account(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get orderId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Exchange__getOrderResultValue0Struct extends ethereum.Tuple {
  get marketId(): Bytes {
    return this[0].toBytes();
  }

  get collateralAmount(): BigInt {
    return this[1].toBigInt();
  }

  get sizeDelta(): BigInt {
    return this[2].toBigInt();
  }

  get submissionBlock(): BigInt {
    return this[3].toBigInt();
  }

  get submissionTimestamp(): BigInt {
    return this[4].toBigInt();
  }

  get executionFee(): BigInt {
    return this[5].toBigInt();
  }

  get minExecutionFee(): BigInt {
    return this[6].toBigInt();
  }

  get account(): Address {
    return this[7].toAddress();
  }

  get collateralToken(): Address {
    return this[8].toAddress();
  }

  get orderType(): i32 {
    return this[9].toI32();
  }

  get isLong(): boolean {
    return this[10].toBoolean();
  }

  get open(): boolean {
    return this[11].toBoolean();
  }

  get extra(): Exchange__getOrderResultValue0ExtraStruct {
    return changetype<Exchange__getOrderResultValue0ExtraStruct>(
      this[12].toTuple()
    );
  }
}

export class Exchange__getOrderResultValue0ExtraStruct extends ethereum.Tuple {
  get triggerPrice(): BigInt {
    return this[0].toBigInt();
  }

  get tpPrice(): BigInt {
    return this[1].toBigInt();
  }

  get slPrice(): BigInt {
    return this[2].toBigInt();
  }

  get tpDelta(): BigInt {
    return this[3].toBigInt();
  }

  get slDelta(): BigInt {
    return this[4].toBigInt();
  }
}

export class Exchange__ordersResultExtraStruct extends ethereum.Tuple {
  get triggerPrice(): BigInt {
    return this[0].toBigInt();
  }

  get tpPrice(): BigInt {
    return this[1].toBigInt();
  }

  get slPrice(): BigInt {
    return this[2].toBigInt();
  }

  get tpDelta(): BigInt {
    return this[3].toBigInt();
  }

  get slDelta(): BigInt {
    return this[4].toBigInt();
  }
}

export class Exchange__ordersResult {
  value0: Bytes;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: Address;
  value8: Address;
  value9: i32;
  value10: boolean;
  value11: boolean;
  value12: Exchange__ordersResultExtraStruct;

  constructor(
    value0: Bytes,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: Address,
    value8: Address,
    value9: i32,
    value10: boolean,
    value11: boolean,
    value12: Exchange__ordersResultExtraStruct
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
    this.value12 = value12;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromAddress(this.value7));
    map.set("value8", ethereum.Value.fromAddress(this.value8));
    map.set(
      "value9",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value9))
    );
    map.set("value10", ethereum.Value.fromBoolean(this.value10));
    map.set("value11", ethereum.Value.fromBoolean(this.value11));
    map.set("value12", ethereum.Value.fromTuple(this.value12));
    return map;
  }

  getMarketId(): Bytes {
    return this.value0;
  }

  getCollateralAmount(): BigInt {
    return this.value1;
  }

  getSizeDelta(): BigInt {
    return this.value2;
  }

  getSubmissionBlock(): BigInt {
    return this.value3;
  }

  getSubmissionTimestamp(): BigInt {
    return this.value4;
  }

  getExecutionFee(): BigInt {
    return this.value5;
  }

  getMinExecutionFee(): BigInt {
    return this.value6;
  }

  getAccount(): Address {
    return this.value7;
  }

  getCollateralToken(): Address {
    return this.value8;
  }

  getOrderType(): i32 {
    return this.value9;
  }

  getIsLong(): boolean {
    return this.value10;
  }

  getOpen(): boolean {
    return this.value11;
  }

  getExtra(): Exchange__ordersResultExtraStruct {
    return this.value12;
  }
}

export class Exchange extends ethereum.SmartContract {
  static bind(address: Address): Exchange {
    return new Exchange("Exchange", address);
  }

  engine(): Address {
    let result = super.call("engine", "engine():(address)", []);

    return result[0].toAddress();
  }

  try_engine(): ethereum.CallResult<Address> {
    let result = super.tryCall("engine", "engine():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  feeManager(): Address {
    let result = super.call("feeManager", "feeManager():(address)", []);

    return result[0].toAddress();
  }

  try_feeManager(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeManager", "feeManager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getOrder(orderId: BigInt): Exchange__getOrderResultValue0Struct {
    let result = super.call(
      "getOrder",
      "getOrder(uint256):((bytes32,uint256,uint256,uint64,uint64,uint64,uint64,address,address,uint8,bool,bool,(uint96,uint96,uint96,uint256,uint256)))",
      [ethereum.Value.fromUnsignedBigInt(orderId)]
    );

    return changetype<Exchange__getOrderResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getOrder(
    orderId: BigInt
  ): ethereum.CallResult<Exchange__getOrderResultValue0Struct> {
    let result = super.tryCall(
      "getOrder",
      "getOrder(uint256):((bytes32,uint256,uint256,uint64,uint64,uint64,uint64,address,address,uint8,bool,bool,(uint96,uint96,uint96,uint256,uint256)))",
      [ethereum.Value.fromUnsignedBigInt(orderId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Exchange__getOrderResultValue0Struct>(value[0].toTuple())
    );
  }

  gov(): Address {
    let result = super.call("gov", "gov():(address)", []);

    return result[0].toAddress();
  }

  try_gov(): ethereum.CallResult<Address> {
    let result = super.tryCall("gov", "gov():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lastOrderId(): BigInt {
    let result = super.call("lastOrderId", "lastOrderId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastOrderId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lastOrderId", "lastOrderId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minExecutionFee(): BigInt {
    let result = super.call(
      "minExecutionFee",
      "minExecutionFee():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_minExecutionFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minExecutionFee",
      "minExecutionFee():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nextOrderId(): BigInt {
    let result = super.call("nextOrderId", "nextOrderId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nextOrderId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nextOrderId", "nextOrderId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  orders(param0: BigInt): Exchange__ordersResult {
    let result = super.call(
      "orders",
      "orders(uint256):(bytes32,uint256,uint256,uint64,uint64,uint64,uint64,address,address,uint8,bool,bool,(uint96,uint96,uint96,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Exchange__ordersResult(
      result[0].toBytes(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toAddress(),
      result[8].toAddress(),
      result[9].toI32(),
      result[10].toBoolean(),
      result[11].toBoolean(),
      changetype<Exchange__ordersResultExtraStruct>(result[12].toTuple())
    );
  }

  try_orders(param0: BigInt): ethereum.CallResult<Exchange__ordersResult> {
    let result = super.tryCall(
      "orders",
      "orders(uint256):(bytes32,uint256,uint256,uint64,uint64,uint64,uint64,address,address,uint8,bool,bool,(uint96,uint96,uint96,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Exchange__ordersResult(
        value[0].toBytes(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toAddress(),
        value[8].toAddress(),
        value[9].toI32(),
        value[10].toBoolean(),
        value[11].toBoolean(),
        changetype<Exchange__ordersResultExtraStruct>(value[12].toTuple())
      )
    );
  }

  weth(): Address {
    let result = super.call("weth", "weth():(address)", []);

    return result[0].toAddress();
  }

  try_weth(): ethereum.CallResult<Address> {
    let result = super.tryCall("weth", "weth():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _engine(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _weth(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _minExecutionFee(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CancelOrderCall extends ethereum.Call {
  get inputs(): CancelOrderCall__Inputs {
    return new CancelOrderCall__Inputs(this);
  }

  get outputs(): CancelOrderCall__Outputs {
    return new CancelOrderCall__Outputs(this);
  }
}

export class CancelOrderCall__Inputs {
  _call: CancelOrderCall;

  constructor(call: CancelOrderCall) {
    this._call = call;
  }

  get orderId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelOrderCall__Outputs {
  _call: CancelOrderCall;

  constructor(call: CancelOrderCall) {
    this._call = call;
  }
}

export class CloseOrderCall extends ethereum.Call {
  get inputs(): CloseOrderCall__Inputs {
    return new CloseOrderCall__Inputs(this);
  }

  get outputs(): CloseOrderCall__Outputs {
    return new CloseOrderCall__Outputs(this);
  }
}

export class CloseOrderCall__Inputs {
  _call: CloseOrderCall;

  constructor(call: CloseOrderCall) {
    this._call = call;
  }

  get orderType(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get isLong(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get marketId(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get collateralToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get sizeDelta(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get extra(): CloseOrderCallExtraStruct {
    return changetype<CloseOrderCallExtraStruct>(
      this._call.inputValues[5].value.toTuple()
    );
  }
}

export class CloseOrderCall__Outputs {
  _call: CloseOrderCall;

  constructor(call: CloseOrderCall) {
    this._call = call;
  }
}

export class CloseOrderCallExtraStruct extends ethereum.Tuple {
  get triggerPrice(): BigInt {
    return this[0].toBigInt();
  }

  get tpPrice(): BigInt {
    return this[1].toBigInt();
  }

  get slPrice(): BigInt {
    return this[2].toBigInt();
  }

  get tpDelta(): BigInt {
    return this[3].toBigInt();
  }

  get slDelta(): BigInt {
    return this[4].toBigInt();
  }
}

export class ExecuteOrderCall extends ethereum.Call {
  get inputs(): ExecuteOrderCall__Inputs {
    return new ExecuteOrderCall__Inputs(this);
  }

  get outputs(): ExecuteOrderCall__Outputs {
    return new ExecuteOrderCall__Outputs(this);
  }
}

export class ExecuteOrderCall__Inputs {
  _call: ExecuteOrderCall;

  constructor(call: ExecuteOrderCall) {
    this._call = call;
  }

  get orderId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get feeTo(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ExecuteOrderCall__Outputs {
  _call: ExecuteOrderCall;

  constructor(call: ExecuteOrderCall) {
    this._call = call;
  }
}

export class PlaceOrderCall extends ethereum.Call {
  get inputs(): PlaceOrderCall__Inputs {
    return new PlaceOrderCall__Inputs(this);
  }

  get outputs(): PlaceOrderCall__Outputs {
    return new PlaceOrderCall__Outputs(this);
  }
}

export class PlaceOrderCall__Inputs {
  _call: PlaceOrderCall;

  constructor(call: PlaceOrderCall) {
    this._call = call;
  }

  get orderType(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get isLong(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get marketId(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get collateralToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get collateralAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get sizeDelta(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get value6(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }

  get extra(): PlaceOrderCallExtraStruct {
    return changetype<PlaceOrderCallExtraStruct>(
      this._call.inputValues[7].value.toTuple()
    );
  }
}

export class PlaceOrderCall__Outputs {
  _call: PlaceOrderCall;

  constructor(call: PlaceOrderCall) {
    this._call = call;
  }
}

export class PlaceOrderCallExtraStruct extends ethereum.Tuple {
  get triggerPrice(): BigInt {
    return this[0].toBigInt();
  }

  get tpPrice(): BigInt {
    return this[1].toBigInt();
  }

  get slPrice(): BigInt {
    return this[2].toBigInt();
  }

  get tpDelta(): BigInt {
    return this[3].toBigInt();
  }

  get slDelta(): BigInt {
    return this[4].toBigInt();
  }
}

export class SetFeeManagerCall extends ethereum.Call {
  get inputs(): SetFeeManagerCall__Inputs {
    return new SetFeeManagerCall__Inputs(this);
  }

  get outputs(): SetFeeManagerCall__Outputs {
    return new SetFeeManagerCall__Outputs(this);
  }
}

export class SetFeeManagerCall__Inputs {
  _call: SetFeeManagerCall;

  constructor(call: SetFeeManagerCall) {
    this._call = call;
  }

  get _feeManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeManagerCall__Outputs {
  _call: SetFeeManagerCall;

  constructor(call: SetFeeManagerCall) {
    this._call = call;
  }
}
