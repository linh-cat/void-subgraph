type ClosePosition @entity(immutable: true) {
  id: Bytes!
  key: Bytes! # bytes32
  size: BigInt! # uint256
  collateralValue: BigInt! # uint256
  exitFundingIndex: BigInt! # uint256
  exitPayoutIndex: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DecreasePosition @entity(immutable: true) {
  id: Bytes!
  key: Bytes! # bytes32
  size: BigInt! # uint256
  sizeDelta: BigInt! # uint256
  collateralReduced: BigInt! # uint256
  fee: BigInt! # uint256
  reserveDelta: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ExchangeSet @entity(immutable: true) {
  id: Bytes!
  exchange: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FeeUsdCollected @entity(immutable: true) {
  id: Bytes!
  marketId: Bytes! # bytes32
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FundingDebtPaid @entity(immutable: true) {
  id: Bytes!
  marketId: Bytes! # bytes32
  account: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FundingPayout @entity(immutable: true) {
  id: Bytes!
  marketId: Bytes! # bytes32
  account: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type IncreasePosition @entity(immutable: true) {
  id: Bytes!
  key: Bytes! # bytes32
  initialCollateralAmount: BigInt! # uint256
  initialCollateralValue: BigInt! # uint256
  fee: BigInt! # uint256
  sizeDelta: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Market @entity {
  id: Bytes!
  marketType: Int! # uint8
  marketId: Bytes! # bytes32
  owner: Bytes! # address
  indexToken: Bytes! # address
  quoteToken: Bytes! # address
  isGoverned: Boolean! # bool
  category: Int! # uint8
  name: String!
  maxLeverage: Int!
  transactionHash: Bytes!
  volume: BigInt!
}

type Position @entity {
  id: Bytes!
  market: Market
  account: Bytes! # address
  key: Bytes! # bytes32
  collateralToken: Bytes! # address
  size: BigInt! # uint256
  collateralValue: BigInt! # uint256
  entryPrice: BigInt! # uint256
  entryFundingIndex: BigInt! # uint256
  entryPayoutIndex: BigInt! # uint256
  createdAt: BigInt
}

type CloseMarketOrderPlaced @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OpenMarketOrderPlaced @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OrderCancelled @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  orderId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OrderExecuted @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  orderId: BigInt! # uint256
  executor: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Order @entity {
  id: String!
  market: Market
  orderType: Int! # uint8
  account: Bytes! # address
  orderId: BigInt! # uint256
  triggerPrice: BigInt!
  tpPrice: BigInt!
  slPrice: BigInt!
  isLong: Boolean! # bool
  collateralAmount: BigInt! # uint256
  collateralToken: Bytes! # address
  executed: Boolean! # bool
  cancelled: Boolean! # bool
  blockNumber: BigInt!
  createdAt: BigInt!
  txHash: Bytes!
}

enum PositionStatus {
  OPEN
  CLOSED
  LIQUIDATED
}

type History @entity {
  id: ID!
  market: Market
  account: Bytes! # address
  status: PositionStatus!
  isLong: Boolean! # bool
  collateralToken: Bytes! # address
  collateralAmount: BigInt!
  collateralValue: BigInt
  sizeDelta: BigInt!
  executedPrice: BigInt!
  liquidatedPrice: BigInt
  pnl: BigInt
  feeUsd: BigInt!
  fundingPayout: BigInt! # usd
  fundingDebt: BigInt! # usd
  txHash: Bytes!

  # close
  collateralReduced: BigInt
}

type Vault @entity {
  # vault address
  id: Bytes!
  owner: Bytes! # address
  # amount via deposit
  liquidity: BigInt!
  # amount via deposit + increase position
  balance: BigInt
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

enum VaultAction {
  DEPOSIT
  WITHDRAW
}

type VaultTransaction @entity {
  id: Bytes!
  action: VaultAction!
  amount: BigInt!
  createdAt: BigInt!
  transactionHash: Bytes!
}
