// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class MarketCreated extends ethereum.Event {
  get params(): MarketCreated__Params {
    return new MarketCreated__Params(this);
  }
}

export class MarketCreated__Params {
  _event: MarketCreated;

  constructor(event: MarketCreated) {
    this._event = event;
  }

  get marketType(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get marketId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get indexToken(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get quoteToken(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get name(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }

  get isGoverned(): boolean {
    return this._event.parameters[6].value.toBoolean();
  }

  get category(): i32 {
    return this._event.parameters[7].value.toI32();
  }

  get maxLeverage(): i32 {
    return this._event.parameters[8].value.toI32();
  }
}

export class ClaimedFundingPayout extends ethereum.Event {
  get params(): ClaimedFundingPayout__Params {
    return new ClaimedFundingPayout__Params(this);
  }
}

export class ClaimedFundingPayout__Params {
  _event: ClaimedFundingPayout;

  constructor(event: ClaimedFundingPayout) {
    this._event = event;
  }

  get marketId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get key(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ClosePosition extends ethereum.Event {
  get params(): ClosePosition__Params {
    return new ClosePosition__Params(this);
  }
}

export class ClosePosition__Params {
  _event: ClosePosition;

  constructor(event: ClosePosition) {
    this._event = event;
  }

  get key(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get size(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get collateralValue(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get exitFundingIndex(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get exitPayoutIndex(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class DecreasePosition extends ethereum.Event {
  get params(): DecreasePosition__Params {
    return new DecreasePosition__Params(this);
  }
}

export class DecreasePosition__Params {
  _event: DecreasePosition;

  constructor(event: DecreasePosition) {
    this._event = event;
  }

  get marketId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get key(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get params(): DecreasePositionParamsStruct {
    return changetype<DecreasePositionParamsStruct>(
      this._event.parameters[3].value.toTuple()
    );
  }

  get result(): DecreasePositionResultStruct {
    return changetype<DecreasePositionResultStruct>(
      this._event.parameters[4].value.toTuple()
    );
  }
}

export class DecreasePositionParamsStruct extends ethereum.Tuple {
  get marketId(): Bytes {
    return this[0].toBytes();
  }

  get account(): Address {
    return this[1].toAddress();
  }

  get collateralToken(): Address {
    return this[2].toAddress();
  }

  get sizeDelta(): BigInt {
    return this[3].toBigInt();
  }

  get isLong(): boolean {
    return this[4].toBoolean();
  }
}

export class DecreasePositionResultStruct extends ethereum.Tuple {
  get realizedPnl(): BigInt {
    return this[0].toBigInt();
  }

  get reserveDelta(): BigInt {
    return this[1].toBigInt();
  }

  get payoutValue(): BigInt {
    return this[2].toBigInt();
  }

  get collateralReduced(): BigInt {
    return this[3].toBigInt();
  }

  get collateralAmountReduced(): BigInt {
    return this[4].toBigInt();
  }

  get totalFee(): BigInt {
    return this[5].toBigInt();
  }

  get fundingPayout(): BigInt {
    return this[6].toBigInt();
  }

  get fundingDebt(): BigInt {
    return this[7].toBigInt();
  }

  get executedPrice(): BigInt {
    return this[8].toBigInt();
  }
}

export class ExchangeSet extends ethereum.Event {
  get params(): ExchangeSet__Params {
    return new ExchangeSet__Params(this);
  }
}

export class ExchangeSet__Params {
  _event: ExchangeSet;

  constructor(event: ExchangeSet) {
    this._event = event;
  }

  get exchange(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class FeeAndFundings extends ethereum.Event {
  get params(): FeeAndFundings__Params {
    return new FeeAndFundings__Params(this);
  }
}

export class FeeAndFundings__Params {
  _event: FeeAndFundings;

  constructor(event: FeeAndFundings) {
    this._event = event;
  }

  get marketId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get key(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get fee(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get fundingDebt(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get fundingPayout(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class FundingDebtPaid extends ethereum.Event {
  get params(): FundingDebtPaid__Params {
    return new FundingDebtPaid__Params(this);
  }
}

export class FundingDebtPaid__Params {
  _event: FundingDebtPaid;

  constructor(event: FundingDebtPaid) {
    this._event = event;
  }

  get marketId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FundingPayout extends ethereum.Event {
  get params(): FundingPayout__Params {
    return new FundingPayout__Params(this);
  }
}

export class FundingPayout__Params {
  _event: FundingPayout;

  constructor(event: FundingPayout) {
    this._event = event;
  }

  get marketId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class IncreasePosition extends ethereum.Event {
  get params(): IncreasePosition__Params {
    return new IncreasePosition__Params(this);
  }
}

export class IncreasePosition__Params {
  _event: IncreasePosition;

  constructor(event: IncreasePosition) {
    this._event = event;
  }

  get marketId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get key(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get initialCollateralValue(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get feeUsd(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get params(): IncreasePositionParamsStruct {
    return changetype<IncreasePositionParamsStruct>(
      this._event.parameters[5].value.toTuple()
    );
  }

  get result(): IncreasePositionResultStruct {
    return changetype<IncreasePositionResultStruct>(
      this._event.parameters[6].value.toTuple()
    );
  }
}

export class IncreasePositionParamsStruct extends ethereum.Tuple {
  get marketId(): Bytes {
    return this[0].toBytes();
  }

  get sizeDelta(): BigInt {
    return this[1].toBigInt();
  }

  get openFee(): BigInt {
    return this[2].toBigInt();
  }

  get initialCollateralAmount(): BigInt {
    return this[3].toBigInt();
  }

  get account(): Address {
    return this[4].toAddress();
  }

  get collateralToken(): Address {
    return this[5].toAddress();
  }

  get isLong(): boolean {
    return this[6].toBoolean();
  }
}

export class IncreasePositionResultStruct extends ethereum.Tuple {
  get fundingPayout(): BigInt {
    return this[0].toBigInt();
  }

  get fundingDebt(): BigInt {
    return this[1].toBigInt();
  }

  get executedPrice(): BigInt {
    return this[2].toBigInt();
  }
}

export class LiquidatePosition extends ethereum.Event {
  get params(): LiquidatePosition__Params {
    return new LiquidatePosition__Params(this);
  }
}

export class LiquidatePosition__Params {
  _event: LiquidatePosition;

  constructor(event: LiquidatePosition) {
    this._event = event;
  }

  get key(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get indexPrice(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SetMarketListed extends ethereum.Event {
  get params(): SetMarketListed__Params {
    return new SetMarketListed__Params(this);
  }
}

export class SetMarketListed__Params {
  _event: SetMarketListed;

  constructor(event: SetMarketListed) {
    this._event = event;
  }

  get marketId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get isListed(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class SetPriceFeed extends ethereum.Event {
  get params(): SetPriceFeed__Params {
    return new SetPriceFeed__Params(this);
  }
}

export class SetPriceFeed__Params {
  _event: SetPriceFeed;

  constructor(event: SetPriceFeed) {
    this._event = event;
  }

  get marketId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get priceFeed(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get priceFeedType(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class UpdateCollateral extends ethereum.Event {
  get params(): UpdateCollateral__Params {
    return new UpdateCollateral__Params(this);
  }
}

export class UpdateCollateral__Params {
  _event: UpdateCollateral;

  constructor(event: UpdateCollateral) {
    this._event = event;
  }

  get marketId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get key(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get increase(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class UpdateIndex extends ethereum.Event {
  get params(): UpdateIndex__Params {
    return new UpdateIndex__Params(this);
  }
}

export class UpdateIndex__Params {
  _event: UpdateIndex;

  constructor(event: UpdateIndex) {
    this._event = event;
  }

  get marketId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get longFunding(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get shortFunding(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get longPayout(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get shortPayout(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get nInterval(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class UpdatePosition extends ethereum.Event {
  get params(): UpdatePosition__Params {
    return new UpdatePosition__Params(this);
  }
}

export class UpdatePosition__Params {
  _event: UpdatePosition;

  constructor(event: UpdatePosition) {
    this._event = event;
  }

  get marketId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get key(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get collateralToken(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get size(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get collateralValue(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get entryPrice(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get entryFundingIndex(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get entryPayoutIndex(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class VaultUpdated extends ethereum.Event {
  get params(): VaultUpdated__Params {
    return new VaultUpdated__Params(this);
  }
}

export class VaultUpdated__Params {
  _event: VaultUpdated;

  constructor(event: VaultUpdated) {
    this._event = event;
  }

  get marketId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get vault(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get collateralAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get reserveDelta(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class TradingEngine__addMarketInputAddressesStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get indexToken(): Address {
    return this[1].toAddress();
  }

  get vault(): Address {
    return this[2].toAddress();
  }

  get quoteToken(): Address {
    return this[3].toAddress();
  }

  get quoteVault(): Address {
    return this[4].toAddress();
  }

  get priceFeed(): Address {
    return this[5].toAddress();
  }

  get fundingRateModel(): Address {
    return this[6].toAddress();
  }
}

export class TradingEngine__addMarketInputParamsStruct extends ethereum.Tuple {
  get name(): Bytes {
    return this[0].toBytes();
  }

  get feeDistributionWeights(): Array<i32> {
    return this[1].toI32Array();
  }

  get maxLongShortSkew(): Array<i32> {
    return this[2].toI32Array();
  }

  get maintenanceMarginBps(): i32 {
    return this[3].toI32();
  }

  get liquidationFee(): i32 {
    return this[4].toI32();
  }

  get maxPostionSizeOverVault(): i32 {
    return this[5].toI32();
  }

  get openFee(): i32 {
    return this[6].toI32();
  }

  get closeFee(): i32 {
    return this[7].toI32();
  }

  get fundingInterval(): BigInt {
    return this[8].toBigInt();
  }

  get maxLeverage(): i32 {
    return this[9].toI32();
  }

  get maxExposureMultiplier(): i32 {
    return this[10].toI32();
  }

  get category(): i32 {
    return this[11].toI32();
  }

  get marketType(): i32 {
    return this[12].toI32();
  }

  get priceFeedType(): i32 {
    return this[13].toI32();
  }

  get isGoverned(): boolean {
    return this[14].toBoolean();
  }
}

export class TradingEngine__getIndexResultValue0Struct extends ethereum.Tuple {
  get longPayout(): BigInt {
    return this[0].toBigInt();
  }

  get shortPayout(): BigInt {
    return this[1].toBigInt();
  }

  get longFunding(): BigInt {
    return this[2].toBigInt();
  }

  get shortFunding(): BigInt {
    return this[3].toBigInt();
  }
}

export class TradingEngine__getPositionResultValue0Struct extends ethereum.Tuple {
  get isLong(): boolean {
    return this[0].toBoolean();
  }

  get size(): BigInt {
    return this[1].toBigInt();
  }

  get collateralValue(): BigInt {
    return this[2].toBigInt();
  }

  get collateralAmount(): BigInt {
    return this[3].toBigInt();
  }

  get entryPrice(): BigInt {
    return this[4].toBigInt();
  }

  get entryFundingIndex(): BigInt {
    return this[5].toBigInt();
  }

  get entryPayoutIndex(): BigInt {
    return this[6].toBigInt();
  }

  get reserveAmount(): BigInt {
    return this[7].toBigInt();
  }
}

export class TradingEngine__getPriceFeedResult {
  value0: i32;
  value1: Address;

  constructor(value0: i32, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }

  getFeedType(): i32 {
    return this.value0;
  }

  getPriceFeed(): Address {
    return this.value1;
  }
}

export class TradingEngine__getVaultAndPositionFeeResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: Address, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getValue0(): Address {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): BigInt {
    return this.value2;
  }
}

export class TradingEngine__marketAddressesResult {
  value0: Address;
  value1: Address;
  value2: Address;
  value3: Address;
  value4: Address;
  value5: Address;
  value6: Address;

  constructor(
    value0: Address,
    value1: Address,
    value2: Address,
    value3: Address,
    value4: Address,
    value5: Address,
    value6: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    map.set("value6", ethereum.Value.fromAddress(this.value6));
    return map;
  }

  getOwner(): Address {
    return this.value0;
  }

  getIndexToken(): Address {
    return this.value1;
  }

  getVault(): Address {
    return this.value2;
  }

  getQuoteToken(): Address {
    return this.value3;
  }

  getQuoteVault(): Address {
    return this.value4;
  }

  getPriceFeed(): Address {
    return this.value5;
  }

  getFundingRateModel(): Address {
    return this.value6;
  }
}

export class TradingEngine__marketParamsResult {
  value0: Bytes;
  value1: i32;
  value2: i32;
  value3: i32;
  value4: i32;
  value5: i32;
  value6: BigInt;
  value7: i32;
  value8: i32;
  value9: i32;
  value10: i32;
  value11: i32;
  value12: boolean;

  constructor(
    value0: Bytes,
    value1: i32,
    value2: i32,
    value3: i32,
    value4: i32,
    value5: i32,
    value6: BigInt,
    value7: i32,
    value8: i32,
    value9: i32,
    value10: i32,
    value11: i32,
    value12: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
    this.value12 = value12;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    map.set(
      "value5",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value5))
    );
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set(
      "value7",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value7))
    );
    map.set(
      "value8",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value8))
    );
    map.set(
      "value9",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value9))
    );
    map.set(
      "value10",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value10))
    );
    map.set(
      "value11",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value11))
    );
    map.set("value12", ethereum.Value.fromBoolean(this.value12));
    return map;
  }

  getName(): Bytes {
    return this.value0;
  }

  getMaintenanceMarginBps(): i32 {
    return this.value1;
  }

  getLiquidationFee(): i32 {
    return this.value2;
  }

  getMaxPostionSizeOverVault(): i32 {
    return this.value3;
  }

  getOpenFee(): i32 {
    return this.value4;
  }

  getCloseFee(): i32 {
    return this.value5;
  }

  getFundingInterval(): BigInt {
    return this.value6;
  }

  getMaxLeverage(): i32 {
    return this.value7;
  }

  getMaxExposureMultiplier(): i32 {
    return this.value8;
  }

  getCategory(): i32 {
    return this.value9;
  }

  getMarketType(): i32 {
    return this.value10;
  }

  getPriceFeedType(): i32 {
    return this.value11;
  }

  getIsGoverned(): boolean {
    return this.value12;
  }
}

export class TradingEngine__prevFundingStatesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromSignedBigInt(this.value3));
    return map;
  }

  getTimestamp(): BigInt {
    return this.value0;
  }

  getLongOpenInterest(): BigInt {
    return this.value1;
  }

  getShortOpenInterest(): BigInt {
    return this.value2;
  }

  getFundingRate(): BigInt {
    return this.value3;
  }
}

export class TradingEngine extends ethereum.SmartContract {
  static bind(address: Address): TradingEngine {
    return new TradingEngine("TradingEngine", address);
  }

  DEFAULT_FUNDING_INTERVAL(): BigInt {
    let result = super.call(
      "DEFAULT_FUNDING_INTERVAL",
      "DEFAULT_FUNDING_INTERVAL():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_DEFAULT_FUNDING_INTERVAL(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "DEFAULT_FUNDING_INTERVAL",
      "DEFAULT_FUNDING_INTERVAL():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  addMarket(
    addresses: TradingEngine__addMarketInputAddressesStruct,
    params: TradingEngine__addMarketInputParamsStruct
  ): Bytes {
    let result = super.call(
      "addMarket",
      "addMarket((address,address,address,address,address,address,address),(bytes32,uint8[2],uint8[2],uint16,uint16,uint16,uint16,uint16,uint32,uint8,uint8,uint8,uint8,uint8,bool)):(bytes32)",
      [ethereum.Value.fromTuple(addresses), ethereum.Value.fromTuple(params)]
    );

    return result[0].toBytes();
  }

  try_addMarket(
    addresses: TradingEngine__addMarketInputAddressesStruct,
    params: TradingEngine__addMarketInputParamsStruct
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "addMarket",
      "addMarket((address,address,address,address,address,address,address),(bytes32,uint8[2],uint8[2],uint16,uint16,uint16,uint16,uint16,uint32,uint8,uint8,uint8,uint8,uint8,bool)):(bytes32)",
      [ethereum.Value.fromTuple(addresses), ethereum.Value.fromTuple(params)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  exchange(): Address {
    let result = super.call("exchange", "exchange():(address)", []);

    return result[0].toAddress();
  }

  try_exchange(): ethereum.CallResult<Address> {
    let result = super.tryCall("exchange", "exchange():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  extraCollaterals(param0: Bytes, param1: BigInt): Address {
    let result = super.call(
      "extraCollaterals",
      "extraCollaterals(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toAddress();
  }

  try_extraCollaterals(
    param0: Bytes,
    param1: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "extraCollaterals",
      "extraCollaterals(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getFundingInterval(marketId: Bytes): BigInt {
    let result = super.call(
      "getFundingInterval",
      "getFundingInterval(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(marketId)]
    );

    return result[0].toBigInt();
  }

  try_getFundingInterval(marketId: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getFundingInterval",
      "getFundingInterval(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(marketId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getIndex(marketKey: Bytes): TradingEngine__getIndexResultValue0Struct {
    let result = super.call(
      "getIndex",
      "getIndex(bytes32):((uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromFixedBytes(marketKey)]
    );

    return changetype<TradingEngine__getIndexResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getIndex(
    marketKey: Bytes
  ): ethereum.CallResult<TradingEngine__getIndexResultValue0Struct> {
    let result = super.tryCall(
      "getIndex",
      "getIndex(bytes32):((uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromFixedBytes(marketKey)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<TradingEngine__getIndexResultValue0Struct>(value[0].toTuple())
    );
  }

  getIndexToken(marketId: Bytes): Address {
    let result = super.call(
      "getIndexToken",
      "getIndexToken(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(marketId)]
    );

    return result[0].toAddress();
  }

  try_getIndexToken(marketId: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getIndexToken",
      "getIndexToken(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(marketId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPosition(key: Bytes): TradingEngine__getPositionResultValue0Struct {
    let result = super.call(
      "getPosition",
      "getPosition(bytes32):((bool,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromFixedBytes(key)]
    );

    return changetype<TradingEngine__getPositionResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getPosition(
    key: Bytes
  ): ethereum.CallResult<TradingEngine__getPositionResultValue0Struct> {
    let result = super.tryCall(
      "getPosition",
      "getPosition(bytes32):((bool,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromFixedBytes(key)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<TradingEngine__getPositionResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getPositionSize(key: Bytes): BigInt {
    let result = super.call(
      "getPositionSize",
      "getPositionSize(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(key)]
    );

    return result[0].toBigInt();
  }

  try_getPositionSize(key: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPositionSize",
      "getPositionSize(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(key)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPriceFeed(marketId: Bytes): TradingEngine__getPriceFeedResult {
    let result = super.call(
      "getPriceFeed",
      "getPriceFeed(bytes32):(uint8,address)",
      [ethereum.Value.fromFixedBytes(marketId)]
    );

    return new TradingEngine__getPriceFeedResult(
      result[0].toI32(),
      result[1].toAddress()
    );
  }

  try_getPriceFeed(
    marketId: Bytes
  ): ethereum.CallResult<TradingEngine__getPriceFeedResult> {
    let result = super.tryCall(
      "getPriceFeed",
      "getPriceFeed(bytes32):(uint8,address)",
      [ethereum.Value.fromFixedBytes(marketId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TradingEngine__getPriceFeedResult(
        value[0].toI32(),
        value[1].toAddress()
      )
    );
  }

  getVault(marketId: Bytes, collateralToken: Address): Address {
    let result = super.call("getVault", "getVault(bytes32,address):(address)", [
      ethereum.Value.fromFixedBytes(marketId),
      ethereum.Value.fromAddress(collateralToken)
    ]);

    return result[0].toAddress();
  }

  try_getVault(
    marketId: Bytes,
    collateralToken: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getVault",
      "getVault(bytes32,address):(address)",
      [
        ethereum.Value.fromFixedBytes(marketId),
        ethereum.Value.fromAddress(collateralToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getVaultAndPositionFee(
    marketId: Bytes,
    collateralToken: Address,
    open: boolean,
    sizeDelta: BigInt
  ): TradingEngine__getVaultAndPositionFeeResult {
    let result = super.call(
      "getVaultAndPositionFee",
      "getVaultAndPositionFee(bytes32,address,bool,uint256):(address,uint256,uint256)",
      [
        ethereum.Value.fromFixedBytes(marketId),
        ethereum.Value.fromAddress(collateralToken),
        ethereum.Value.fromBoolean(open),
        ethereum.Value.fromUnsignedBigInt(sizeDelta)
      ]
    );

    return new TradingEngine__getVaultAndPositionFeeResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getVaultAndPositionFee(
    marketId: Bytes,
    collateralToken: Address,
    open: boolean,
    sizeDelta: BigInt
  ): ethereum.CallResult<TradingEngine__getVaultAndPositionFeeResult> {
    let result = super.tryCall(
      "getVaultAndPositionFee",
      "getVaultAndPositionFee(bytes32,address,bool,uint256):(address,uint256,uint256)",
      [
        ethereum.Value.fromFixedBytes(marketId),
        ethereum.Value.fromAddress(collateralToken),
        ethereum.Value.fromBoolean(open),
        ethereum.Value.fromUnsignedBigInt(sizeDelta)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TradingEngine__getVaultAndPositionFeeResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  gov(): Address {
    let result = super.call("gov", "gov():(address)", []);

    return result[0].toAddress();
  }

  try_gov(): ethereum.CallResult<Address> {
    let result = super.tryCall("gov", "gov():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isListed(param0: Bytes): boolean {
    let result = super.call("isListed", "isListed(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isListed(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("isListed", "isListed(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  marketAddresses(param0: Bytes): TradingEngine__marketAddressesResult {
    let result = super.call(
      "marketAddresses",
      "marketAddresses(bytes32):(address,address,address,address,address,address,address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new TradingEngine__marketAddressesResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toAddress(),
      result[4].toAddress(),
      result[5].toAddress(),
      result[6].toAddress()
    );
  }

  try_marketAddresses(
    param0: Bytes
  ): ethereum.CallResult<TradingEngine__marketAddressesResult> {
    let result = super.tryCall(
      "marketAddresses",
      "marketAddresses(bytes32):(address,address,address,address,address,address,address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TradingEngine__marketAddressesResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toAddress(),
        value[4].toAddress(),
        value[5].toAddress(),
        value[6].toAddress()
      )
    );
  }

  marketParams(param0: Bytes): TradingEngine__marketParamsResult {
    let result = super.call(
      "marketParams",
      "marketParams(bytes32):(bytes32,uint16,uint16,uint16,uint16,uint16,uint32,uint8,uint8,uint8,uint8,uint8,bool)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new TradingEngine__marketParamsResult(
      result[0].toBytes(),
      result[1].toI32(),
      result[2].toI32(),
      result[3].toI32(),
      result[4].toI32(),
      result[5].toI32(),
      result[6].toBigInt(),
      result[7].toI32(),
      result[8].toI32(),
      result[9].toI32(),
      result[10].toI32(),
      result[11].toI32(),
      result[12].toBoolean()
    );
  }

  try_marketParams(
    param0: Bytes
  ): ethereum.CallResult<TradingEngine__marketParamsResult> {
    let result = super.tryCall(
      "marketParams",
      "marketParams(bytes32):(bytes32,uint16,uint16,uint16,uint16,uint16,uint32,uint8,uint8,uint8,uint8,uint8,bool)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TradingEngine__marketParamsResult(
        value[0].toBytes(),
        value[1].toI32(),
        value[2].toI32(),
        value[3].toI32(),
        value[4].toI32(),
        value[5].toI32(),
        value[6].toBigInt(),
        value[7].toI32(),
        value[8].toI32(),
        value[9].toI32(),
        value[10].toI32(),
        value[11].toI32(),
        value[12].toBoolean()
      )
    );
  }

  prevFundingStates(param0: Bytes): TradingEngine__prevFundingStatesResult {
    let result = super.call(
      "prevFundingStates",
      "prevFundingStates(bytes32):(uint256,uint256,uint256,int256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new TradingEngine__prevFundingStatesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_prevFundingStates(
    param0: Bytes
  ): ethereum.CallResult<TradingEngine__prevFundingStatesResult> {
    let result = super.tryCall(
      "prevFundingStates",
      "prevFundingStates(bytes32):(uint256,uint256,uint256,int256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TradingEngine__prevFundingStatesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddMarketCall extends ethereum.Call {
  get inputs(): AddMarketCall__Inputs {
    return new AddMarketCall__Inputs(this);
  }

  get outputs(): AddMarketCall__Outputs {
    return new AddMarketCall__Outputs(this);
  }
}

export class AddMarketCall__Inputs {
  _call: AddMarketCall;

  constructor(call: AddMarketCall) {
    this._call = call;
  }

  get addresses(): AddMarketCallAddressesStruct {
    return changetype<AddMarketCallAddressesStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get params(): AddMarketCallParamsStruct {
    return changetype<AddMarketCallParamsStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class AddMarketCall__Outputs {
  _call: AddMarketCall;

  constructor(call: AddMarketCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class AddMarketCallAddressesStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get indexToken(): Address {
    return this[1].toAddress();
  }

  get vault(): Address {
    return this[2].toAddress();
  }

  get quoteToken(): Address {
    return this[3].toAddress();
  }

  get quoteVault(): Address {
    return this[4].toAddress();
  }

  get priceFeed(): Address {
    return this[5].toAddress();
  }

  get fundingRateModel(): Address {
    return this[6].toAddress();
  }
}

export class AddMarketCallParamsStruct extends ethereum.Tuple {
  get name(): Bytes {
    return this[0].toBytes();
  }

  get feeDistributionWeights(): Array<i32> {
    return this[1].toI32Array();
  }

  get maxLongShortSkew(): Array<i32> {
    return this[2].toI32Array();
  }

  get maintenanceMarginBps(): i32 {
    return this[3].toI32();
  }

  get liquidationFee(): i32 {
    return this[4].toI32();
  }

  get maxPostionSizeOverVault(): i32 {
    return this[5].toI32();
  }

  get openFee(): i32 {
    return this[6].toI32();
  }

  get closeFee(): i32 {
    return this[7].toI32();
  }

  get fundingInterval(): BigInt {
    return this[8].toBigInt();
  }

  get maxLeverage(): i32 {
    return this[9].toI32();
  }

  get maxExposureMultiplier(): i32 {
    return this[10].toI32();
  }

  get category(): i32 {
    return this[11].toI32();
  }

  get marketType(): i32 {
    return this[12].toI32();
  }

  get priceFeedType(): i32 {
    return this[13].toI32();
  }

  get isGoverned(): boolean {
    return this[14].toBoolean();
  }
}

export class AddStableCoinPriceFeedCall extends ethereum.Call {
  get inputs(): AddStableCoinPriceFeedCall__Inputs {
    return new AddStableCoinPriceFeedCall__Inputs(this);
  }

  get outputs(): AddStableCoinPriceFeedCall__Outputs {
    return new AddStableCoinPriceFeedCall__Outputs(this);
  }
}

export class AddStableCoinPriceFeedCall__Inputs {
  _call: AddStableCoinPriceFeedCall;

  constructor(call: AddStableCoinPriceFeedCall) {
    this._call = call;
  }

  get stablecoin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get feedType(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get priceFeed(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class AddStableCoinPriceFeedCall__Outputs {
  _call: AddStableCoinPriceFeedCall;

  constructor(call: AddStableCoinPriceFeedCall) {
    this._call = call;
  }
}

export class ClaimFundingPayoutCall extends ethereum.Call {
  get inputs(): ClaimFundingPayoutCall__Inputs {
    return new ClaimFundingPayoutCall__Inputs(this);
  }

  get outputs(): ClaimFundingPayoutCall__Outputs {
    return new ClaimFundingPayoutCall__Outputs(this);
  }
}

export class ClaimFundingPayoutCall__Inputs {
  _call: ClaimFundingPayoutCall;

  constructor(call: ClaimFundingPayoutCall) {
    this._call = call;
  }

  get marketId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get collateralToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get isLong(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class ClaimFundingPayoutCall__Outputs {
  _call: ClaimFundingPayoutCall;

  constructor(call: ClaimFundingPayoutCall) {
    this._call = call;
  }
}

export class DecreasePositionCall extends ethereum.Call {
  get inputs(): DecreasePositionCall__Inputs {
    return new DecreasePositionCall__Inputs(this);
  }

  get outputs(): DecreasePositionCall__Outputs {
    return new DecreasePositionCall__Outputs(this);
  }
}

export class DecreasePositionCall__Inputs {
  _call: DecreasePositionCall;

  constructor(call: DecreasePositionCall) {
    this._call = call;
  }

  get params(): DecreasePositionCallParamsStruct {
    return changetype<DecreasePositionCallParamsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class DecreasePositionCall__Outputs {
  _call: DecreasePositionCall;

  constructor(call: DecreasePositionCall) {
    this._call = call;
  }
}

export class DecreasePositionCallParamsStruct extends ethereum.Tuple {
  get marketId(): Bytes {
    return this[0].toBytes();
  }

  get account(): Address {
    return this[1].toAddress();
  }

  get collateralToken(): Address {
    return this[2].toAddress();
  }

  get sizeDelta(): BigInt {
    return this[3].toBigInt();
  }

  get isLong(): boolean {
    return this[4].toBoolean();
  }
}

export class IncreasePositionCall extends ethereum.Call {
  get inputs(): IncreasePositionCall__Inputs {
    return new IncreasePositionCall__Inputs(this);
  }

  get outputs(): IncreasePositionCall__Outputs {
    return new IncreasePositionCall__Outputs(this);
  }
}

export class IncreasePositionCall__Inputs {
  _call: IncreasePositionCall;

  constructor(call: IncreasePositionCall) {
    this._call = call;
  }

  get params(): IncreasePositionCallParamsStruct {
    return changetype<IncreasePositionCallParamsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class IncreasePositionCall__Outputs {
  _call: IncreasePositionCall;

  constructor(call: IncreasePositionCall) {
    this._call = call;
  }
}

export class IncreasePositionCallParamsStruct extends ethereum.Tuple {
  get marketId(): Bytes {
    return this[0].toBytes();
  }

  get sizeDelta(): BigInt {
    return this[1].toBigInt();
  }

  get openFee(): BigInt {
    return this[2].toBigInt();
  }

  get initialCollateralAmount(): BigInt {
    return this[3].toBigInt();
  }

  get account(): Address {
    return this[4].toAddress();
  }

  get collateralToken(): Address {
    return this[5].toAddress();
  }

  get isLong(): boolean {
    return this[6].toBoolean();
  }
}

export class LiquidatePositionCall extends ethereum.Call {
  get inputs(): LiquidatePositionCall__Inputs {
    return new LiquidatePositionCall__Inputs(this);
  }

  get outputs(): LiquidatePositionCall__Outputs {
    return new LiquidatePositionCall__Outputs(this);
  }
}

export class LiquidatePositionCall__Inputs {
  _call: LiquidatePositionCall;

  constructor(call: LiquidatePositionCall) {
    this._call = call;
  }

  get params(): LiquidatePositionCallParamsStruct {
    return changetype<LiquidatePositionCallParamsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class LiquidatePositionCall__Outputs {
  _call: LiquidatePositionCall;

  constructor(call: LiquidatePositionCall) {
    this._call = call;
  }
}

export class LiquidatePositionCallParamsStruct extends ethereum.Tuple {
  get marketId(): Bytes {
    return this[0].toBytes();
  }

  get account(): Address {
    return this[1].toAddress();
  }

  get collateralToken(): Address {
    return this[2].toAddress();
  }

  get isLong(): boolean {
    return this[3].toBoolean();
  }

  get feeTo(): Address {
    return this[4].toAddress();
  }
}

export class SetExchangeCall extends ethereum.Call {
  get inputs(): SetExchangeCall__Inputs {
    return new SetExchangeCall__Inputs(this);
  }

  get outputs(): SetExchangeCall__Outputs {
    return new SetExchangeCall__Outputs(this);
  }
}

export class SetExchangeCall__Inputs {
  _call: SetExchangeCall;

  constructor(call: SetExchangeCall) {
    this._call = call;
  }

  get _exchange(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetExchangeCall__Outputs {
  _call: SetExchangeCall;

  constructor(call: SetExchangeCall) {
    this._call = call;
  }
}

export class SetMarketListedCall extends ethereum.Call {
  get inputs(): SetMarketListedCall__Inputs {
    return new SetMarketListedCall__Inputs(this);
  }

  get outputs(): SetMarketListedCall__Outputs {
    return new SetMarketListedCall__Outputs(this);
  }
}

export class SetMarketListedCall__Inputs {
  _call: SetMarketListedCall;

  constructor(call: SetMarketListedCall) {
    this._call = call;
  }

  get marketId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get flag(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetMarketListedCall__Outputs {
  _call: SetMarketListedCall;

  constructor(call: SetMarketListedCall) {
    this._call = call;
  }
}

export class SetPriceFeedCall extends ethereum.Call {
  get inputs(): SetPriceFeedCall__Inputs {
    return new SetPriceFeedCall__Inputs(this);
  }

  get outputs(): SetPriceFeedCall__Outputs {
    return new SetPriceFeedCall__Outputs(this);
  }
}

export class SetPriceFeedCall__Inputs {
  _call: SetPriceFeedCall;

  constructor(call: SetPriceFeedCall) {
    this._call = call;
  }

  get marketId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get feedType(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get priceFeed(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SetPriceFeedCall__Outputs {
  _call: SetPriceFeedCall;

  constructor(call: SetPriceFeedCall) {
    this._call = call;
  }
}

export class UpdateCollateralCall extends ethereum.Call {
  get inputs(): UpdateCollateralCall__Inputs {
    return new UpdateCollateralCall__Inputs(this);
  }

  get outputs(): UpdateCollateralCall__Outputs {
    return new UpdateCollateralCall__Outputs(this);
  }
}

export class UpdateCollateralCall__Inputs {
  _call: UpdateCollateralCall;

  constructor(call: UpdateCollateralCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get marketId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get collateralToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get isLong(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get increase(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }

  get amount(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class UpdateCollateralCall__Outputs {
  _call: UpdateCollateralCall;

  constructor(call: UpdateCollateralCall) {
    this._call = call;
  }
}

export class UpdateVaultBalanceCall extends ethereum.Call {
  get inputs(): UpdateVaultBalanceCall__Inputs {
    return new UpdateVaultBalanceCall__Inputs(this);
  }

  get outputs(): UpdateVaultBalanceCall__Outputs {
    return new UpdateVaultBalanceCall__Outputs(this);
  }
}

export class UpdateVaultBalanceCall__Inputs {
  _call: UpdateVaultBalanceCall;

  constructor(call: UpdateVaultBalanceCall) {
    this._call = call;
  }

  get vault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get delta(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get isIncrease(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class UpdateVaultBalanceCall__Outputs {
  _call: UpdateVaultBalanceCall;

  constructor(call: UpdateVaultBalanceCall) {
    this._call = call;
  }
}
